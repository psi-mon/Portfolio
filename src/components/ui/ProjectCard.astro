---
export interface Props {
  title: string;
  description: string;
  year: number;
  responsibilities: string[];
  techStack: string[];
  featureImage: string;
  galleryImages?: string[];
  videoUrl?: string;
}

const { 
  title, 
  description, 
  year,
  responsibilities, 
  techStack, 
  featureImage, 
  galleryImages = [], 
  videoUrl 
} = Astro.props;
---

<div class="border border-border rounded-lg p-6 project-card" data-project-title={title}>
  <!-- Project Title and Year -->
  <div class="flex items-center justify-between mb-4">
    <h3 class="text-2xl font-semibold text-headings">{title}</h3>
    <span class="text-lg font-medium text-muted-foreground bg-muted-foreground/10 px-3 py-1 rounded-full">{year}</span>
  </div>
  
  <!-- Feature Image -->
  <div class="mb-6">
    <img 
      src={featureImage} 
      alt={`${title} - Feature Image`} 
      class="w-full rounded-lg cursor-pointer hover:opacity-90 transition-opacity"
      onclick="openImageModal(this.src, this.alt, this)"
    />
  </div>
  
  <!-- Description -->
  <div class="mb-6">
    <p class="text-muted-foreground">{description}</p>
  </div>
  
  <!-- My Responsibilities -->
  <div class="mb-6">
    <h4 class="font-semibold text-headings mb-3">My Responsibilities:</h4>
    <ul class="text-muted-foreground text-sm space-y-2">
      {responsibilities.map((responsibility) => (
        <li class="flex items-start gap-2">
          <span class="text-headings mt-1">•</span>
          <span>{responsibility}</span>
        </li>
      ))}
    </ul>
  </div>
  
  <!-- Tech Stack -->
  <div class="mb-6">
    <h4 class="font-semibold text-headings mb-3">Tech Stack:</h4>
    <div class="flex flex-wrap gap-2">
      {techStack.map((tech) => (
        <span class="px-3 py-1 bg-headings/10 text-headings rounded-full text-sm">{tech}</span>
      ))}
    </div>
  </div>
  
  <!-- Video (if available) -->
  {videoUrl && videoUrl.trim() !== "" && (
    <div class="mb-6">
      <h4 class="font-semibold text-headings mb-3">Video:</h4>
      <video controls class="w-full rounded-lg">
        <source src={videoUrl} type="video/mp4">
        Your browser does not support the video tag.
      </video>
    </div>
  )}
  
  <!-- Gallery Images (if available) -->
  {galleryImages && galleryImages.length > 0 && (
    <div class="mb-6">
      <h4 class="font-semibold text-headings mb-3">Gallery:</h4>
      <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
        {galleryImages.map((image) => (
          <img 
            src={image} 
            alt={`${title} - Gallery Image`} 
            class="w-full rounded cursor-pointer hover:opacity-90 transition-opacity"
            onclick="openImageModal(this.src, this.alt, this)"
          />
        ))}
      </div>
    </div>
  )}
</div>

<!-- Image Modal -->
<div id="imageModal" class="fixed inset-0 bg-black bg-opacity-90 z-50 hidden flex items-center justify-center p-4">
  <div class="relative max-w-6xl max-h-full w-full">
    <!-- Close Button -->
    <button 
      id="closeModal" 
      class="absolute top-4 right-4 text-white text-3xl font-bold hover:text-gray-300 z-20 bg-black bg-opacity-50 rounded-full w-10 h-10 flex items-center justify-center"
    >
      ×
    </button>
    
    <!-- Previous Button -->
    <button 
      id="prevImage" 
      class="absolute left-4 top-1/2 transform -translate-y-1/2 text-white text-2xl font-bold hover:text-gray-300 z-20 bg-black bg-opacity-50 rounded-full w-12 h-12 flex items-center justify-center"
    >
      ‹
    </button>
    
    <!-- Next Button -->
    <button 
      id="nextImage" 
      class="absolute right-4 top-1/2 transform -translate-y-1/2 text-white text-2xl font-bold hover:text-gray-300 z-20 bg-black bg-opacity-50 rounded-full w-12 h-12 flex items-center justify-center"
    >
      ›
    </button>
    
    <!-- Image -->
    <img id="modalImage" src="" alt="" class="max-w-full max-h-full rounded-lg mx-auto" />
    
    <!-- Image Counter -->
    <div id="imageCounter" class="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white bg-black bg-opacity-50 px-3 py-1 rounded-full text-sm">
      1 / 1
    </div>
  </div>
</div>

<script>
  let currentImageIndex = 0;
  let allImages: string[] = [];
  let allAlts: string[] = [];

  function openImageModal(src: string, alt: string, clickedElement?: HTMLImageElement) {
    const modal = document.getElementById('imageModal');
    const modalImage = document.getElementById('modalImage') as HTMLImageElement;
    const imageCounter = document.getElementById('imageCounter');
    
    if (modal && modalImage) {
      let projectCard: Element | null = null;
      
      // Use the passed element or try to find it
      const clickedImage = clickedElement || document.querySelector(`img[src="${src}"]`);
      
      if (clickedImage) {
        // Try multiple selectors to find the project card
        projectCard = clickedImage.closest('.project-card') || 
                     clickedImage.closest('.border') || 
                     clickedImage.closest('[data-project-title]');
        
        console.log('Clicked image found:', clickedImage);
        console.log('Project card found:', projectCard);
      }
      
      if (projectCard) {
        const images = Array.from(projectCard.querySelectorAll('img')).map(img => img.src);
        const alts = Array.from(projectCard.querySelectorAll('img')).map(img => img.alt);
        
        allImages = images;
        allAlts = alts;
        currentImageIndex = images.indexOf(src);
        
        if (currentImageIndex === -1) currentImageIndex = 0;
        
        console.log('Found project card with images:', images.length, 'Current index:', currentImageIndex);
        console.log('All images:', images);
        console.log('Clicked image src:', src);
      } else {
        console.log('No project card found, using single image');
        console.log('Clicked image:', clickedImage);
        console.log('All project cards:', document.querySelectorAll('.project-card'));
        allImages = [src];
        allAlts = [alt];
        currentImageIndex = 0;
      }
      
      modalImage.src = src;
      modalImage.alt = alt;
      modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      
      // Update counter
      if (imageCounter) {
        imageCounter.textContent = `${currentImageIndex + 1} / ${allImages.length}`;
      }
      
      // Show/hide navigation buttons
      updateNavigationButtons();
    }
  }
  
  function closeImageModal() {
    const modal = document.getElementById('imageModal');
    if (modal) {
      modal.classList.add('hidden');
      document.body.style.overflow = 'auto';
    }
  }
  
  function showNextImage() {
    if (allImages.length > 1) {
      currentImageIndex = (currentImageIndex + 1) % allImages.length;
      updateModalImage();
    }
  }
  
  function showPrevImage() {
    if (allImages.length > 1) {
      currentImageIndex = (currentImageIndex - 1 + allImages.length) % allImages.length;
      updateModalImage();
    }
  }
  
  function updateModalImage() {
    const modalImage = document.getElementById('modalImage') as HTMLImageElement;
    const imageCounter = document.getElementById('imageCounter');
    
    if (modalImage && allImages[currentImageIndex]) {
      modalImage.src = allImages[currentImageIndex];
      modalImage.alt = allAlts[currentImageIndex] || '';
    }
    
    if (imageCounter) {
      imageCounter.textContent = `${currentImageIndex + 1} / ${allImages.length}`;
    }
    
    updateNavigationButtons();
  }
  
  function updateNavigationButtons() {
    const prevBtn = document.getElementById('prevImage');
    const nextBtn = document.getElementById('nextImage');
    
    if (prevBtn && nextBtn) {
      if (allImages.length <= 1) {
        prevBtn.style.display = 'none';
        nextBtn.style.display = 'none';
      } else {
        prevBtn.style.display = 'flex';
        nextBtn.style.display = 'flex';
      }
    }
  }
  
  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    const closeBtn = document.getElementById('closeModal');
    const prevBtn = document.getElementById('prevImage');
    const nextBtn = document.getElementById('nextImage');
    const modal = document.getElementById('imageModal');
    
    if (closeBtn) closeBtn.addEventListener('click', closeImageModal);
    if (prevBtn) prevBtn.addEventListener('click', showPrevImage);
    if (nextBtn) nextBtn.addEventListener('click', showNextImage);
    
    // Close modal when clicking outside the image
    if (modal) {
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          closeImageModal();
        }
      });
    }
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      const modal = document.getElementById('imageModal');
      if (modal && !modal.classList.contains('hidden')) {
        if (e.key === 'Escape') {
          closeImageModal();
        } else if (e.key === 'ArrowLeft') {
          showPrevImage();
        } else if (e.key === 'ArrowRight') {
          showNextImage();
        }
      }
    });
  });
  
  // Make functions globally available
  (window as any).openImageModal = openImageModal;
  (window as any).closeImageModal = closeImageModal;
</script>
